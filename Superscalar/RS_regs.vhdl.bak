library ieee;
use ieee.std_logic_1164.all;

--package for reservation station registers

package RS_gates is
  component ISSUED is
    port (clk,rst,w_enable : in std_logic;
            A1 : in std_logic_vector(5 downto 0);
            D1 : in std_logic_vector(0 downto 0);
            output : out std_logic_vector(63 downto 0));
  end component ISSUED;

  component OPCODE is
    port (clk,rst,w_enable : in std_logic;
            A1 : in std_logic_vector(5 downto 0);
            D1 : in std_logic_vector(2 downto 0);
            A2 : in std_logic_vector(5 downto 0);
            D2 : in std_logic_vector(2 downto 0);         
            A_in : in std_logic_vector(5 downto 0);
            D_out : out std_logic_vector(2 downto 0));
  end component OPCODE;

  component PC is
    port (clk,rst,w_enable : in std_logic;
            A1 : in std_logic_vector(5 downto 0);
            D1 : in std_logic_vector(15 downto 0);
            A2 : in std_logic_vector(5 downto 0);
            D2 : in std_logic_vector(15 downto 0);         
            A_in : in std_logic_vector(5 downto 0);
            D_out : out std_logic_vector(15 downto 0));
  end component PC;

  component OPR1 is
    port (clk,rst,w_enable : in std_logic;
            A1 : in std_logic_vector(5 downto 0);
            D1 : in std_logic_vector(15 downto 0);
            A2 : in std_logic_vector(5 downto 0);
            D2 : in std_logic_vector(15 downto 0);         
            A_in : in std_logic_vector(5 downto 0);
            D_out : out std_logic_vector(15 downto 0));
  end component OPR1;

  component V1 is
    port (clk,rst,w_enable : in std_logic;
            input : in std_logic_vector(0 downto 0);
            output : out std_logic_vector(0 downto 0));
  end component V1;

  component OPR2 is
    port (clk,rst,w_enable : in std_logic;
            input : in std_logic_vector(15 downto 0);
            output : out std_logic_vector(15 downto 0));
  end component OPR2;

  component V2 is
    port (clk,rst,w_enable : in std_logic;
            input : in std_logic_vector(0 downto 0);
            output : out std_logic_vector(0 downto 0));
  end component V2;

  component IMM9 is
    port (clk,rst,w_enable : in std_logic;
            input : in std_logic_vector(8 downto 0);
            output : out std_logic_vector(8 downto 0));
  end component IMM9;

  component C is
    port (clk,rst,w_enable : in std_logic;
			input : in std_logic_vector(0 downto 0);
			output : out std_logic_vector(0 downto 0));
  end component C;

  component VC is
    port (clk,rst,w_enable : in std_logic;
			input : in std_logic_vector(0 downto 0);
			output : out std_logic_vector(0 downto 0));
  end component VC;
  
  component Z is
    port (clk,rst,w_enable : in std_logic;
			input : in std_logic_vector(0 downto 0);
			output : out std_logic_vector(0 downto 0));
  end component Z;

  component VZ is
    port (clk,rst,w_enable : in std_logic;
			input : in std_logic_vector(0 downto 0);
			output : out std_logic_vector(0 downto 0));
  end component VZ;

  component COND is
    port (clk,rst,w_enable : in std_logic;
			input : in std_logic_vector(2 downto 0);
			output : out std_logic_vector(2 downto 0));;
  end component COND;

  component READY is
    port (clk,rst,w_enable : in std_logic;
			input : in std_logic_vector(0 downto 0);
			output : out std_logic_vector(0 downto 0));;
  end component READY;

end package RS_gates;


--------------ONE-BIT-REG----------------
library ieee;
use ieee.std_logic_1164.all;
entity BIT1_REG is
    port (clk,rst,w_enable : in std_logic;
            A1 : in std_logic_vector(5 downto 0);
            D1 : in std_logic;
            output : out std_logic_vector(63 downto 0));
end entity BIT1_REG;

architecture behav of BIT1_REG is
    signal data : std_logic_vector(15 downto 0) := (others => '0');
	begin 
		process(clk,rst)
		begin 
			if(rst = '1') then 
				data(0 to 63) <= (others => (others => '0'));
			else then 
				if(w_enable = '1') then 
					data(to_integer(unsigned(A1))) <= D1;					
				end if;
			end if;
		end process;
		output <= data(0 to 63);
end behav;

-----------------ISSUED--------------------
library ieee;
use ieee.std_logic_1164.all;
entity ISSUED is
    port (clk,rst,w_enable : in std_logic;
            A1 : in std_logic_vector(5 downto 0);
            D1 : in std_logic;
            output : out std_logic_vector(63 downto 0));
end entity ISSUED;

architecture behav of ISSUED is
    component BIT1_REG is 
        port (clk,rst,w_enable : in std_logic;
            A1 : in std_logic_vector(5 downto 0);
            D1 : in std_logic;
            output : out std_logic_vector(63 downto 0));
    end component;
	begin 
		issued1: BIT1_REG port map (clk, rst, w_enable, A1, D1, output);
end behav;
  

-------------------OPCODE----------------------
library ieee;
use ieee.std_logic_1164.all;
entity OPCODE is
    port (clk,rst,w_enable : in std_logic;
            A1 : in std_logic_vector(5 downto 0);
            D1 : in std_logic_vector(2 downto 0);
            A2 : in std_logic_vector(5 downto 0);
            D2 : in std_logic_vector(2 downto 0);         
            A_in : in std_logic_vector(5 downto 0);
            D_out : out std_logic_vector(2 downto 0));
end entity OPCODE;

architecture behav of OPCODE is
	type memory_array_3 is array (0 to 63) of std_logic_vector(2 downto 0);
	signal mem : memory_array := (others => (others => '0'));
	begin 
		process(clk,rst,A1,A2,D1,D2,A_in)
		begin 
			if(rst = '1') then 
				mem(0 to 63) <= (others => (others => '0'));
			else then 
				if(w_enable = '1') then 
					mem(to_integer(unsigned(A1))) <= D1;
                    mem(to_integer(unsigned(A2))) <= D2;
				end if;
			end if;
		end process;
		D_out <= mem(to_integer(unsigned(A_in)));
end behav;
  
--------------------PC---------------------
library ieee;
use ieee.std_logic_1164.all;
entity PC is
    port (clk,rst,w_enable : in std_logic;
            A1 : in std_logic_vector(5 downto 0);
            D1 : in std_logic_vector(15 downto 0);
            A2 : in std_logic_vector(5 downto 0);
            D2 : in std_logic_vector(15 downto 0);         
            A_in : in std_logic_vector(5 downto 0);
            D_out : out std_logic_vector(15 downto 0));
end entity PC;

architecture behav of PC is
	type memory_array_16 is array (0 to 63) of std_logic_vector(15 downto 0);
	signal mem : memory_array := (others => (others => '0'));
	begin 
        process(clk,rst,A1,A2,D1,D2,A_in)
		begin 
			if(rst = '1') then 
				mem(0 to 63) <= (others => (others => '0'));
			else then 
				if(w_enable = '1') then 
					mem(to_integer(unsigned(A1))) <= D1;
                    mem(to_integer(unsigned(A2))) <= D2;
				end if;
			end if;
		end process;
		D_out <= mem(to_integer(unsigned(A_in)));
end behav;
  
-----------------------OPR1-----------------------
library ieee;
use ieee.std_logic_1164.all;
entity OPR1 is
    port (clk,rst,w_enable : in std_logic;
    A1 : in std_logic_vector(5 downto 0);
    D1 : in std_logic_vector(15 downto 0);
    A2 : in std_logic_vector(5 downto 0);
    D2 : in std_logic_vector(15 downto 0);         
    A_in : in std_logic_vector(5 downto 0);
    D_out : out std_logic_vector(15 downto 0));
end entity OPR1;

architecture behav of OPR1 is
	type memory_array_16 is array (0 to 63) of std_logic_vector(15 downto 0);
	signal mem : memory_array := (others => (others => '0'));
	begin 
        process(clk,rst,A1,A2,D1,D2,A_in)
		begin 
			if(rst = '1') then 
				mem(0 to 63) <= (others => (others => '0'));
			else then 
				if(w_enable = '1') then 
					mem(to_integer(unsigned(A1))) <= D1;
                    mem(to_integer(unsigned(A2))) <= D2;
				end if;
			end if;
		end process;
		D_out <= mem(to_integer(unsigned(A_in)));
end behav;

------------------------V1-----------------------
  
library ieee;
use ieee.std_logic_1164.all;
entity V1 is
    port (clk,rst,w_enable : in std_logic;
            A1 : in std_logic_vector(5 downto 0);
            D1 : in std_logic;
            output : out std_logic_vector(63 downto 0));
end entity V1;

architecture behav of V1 is
    component BIT1_REG is 
        port (clk,rst,w_enable : in std_logic;
            A1 : in std_logic_vector(5 downto 0);
            D1 : in std_logic;
            output : out std_logic_vector(63 downto 0));
    end component;
	begin 
		V1_1: BIT1_REG port map (clk, rst, w_enable, A1, D1, output);
end behav;

-----------------------OPR2-----------------------
library ieee;
use ieee.std_logic_1164.all;
entity OPR2 is
    port (clk,rst,w_enable : in std_logic;
    A1 : in std_logic_vector(5 downto 0);
    D1 : in std_logic_vector(15 downto 0);
    A2 : in std_logic_vector(5 downto 0);
    D2 : in std_logic_vector(15 downto 0);         
    A_in : in std_logic_vector(5 downto 0);
    D_out : out std_logic_vector(15 downto 0));
end entity OPR2;

architecture behav of OPR2 is
	type memory_array_16 is array (0 to 63) of std_logic_vector(15 downto 0);
	signal mem : memory_array := (others => (others => '0'));
	begin 
        process(clk,rst,A1,A2,D1,D2,A_in)
		begin 
			if(rst = '1') then 
				mem(0 to 63) <= (others => (others => '0'));
			else then 
				if(w_enable = '1') then 
					mem(to_integer(unsigned(A1))) <= D1;
                    mem(to_integer(unsigned(A2))) <= D2;
				end if;
			end if;
		end process;
		D_out <= mem(to_integer(unsigned(A_in)));
end behav;

------------------------V2-----------------------
  
library ieee;
use ieee.std_logic_1164.all;
entity V2 is
    port (clk,rst,w_enable : in std_logic;
            A1 : in std_logic_vector(5 downto 0);
            D1 : in std_logic;
            output : out std_logic_vector(63 downto 0));
end entity V2;

architecture behav of V2 is
    component BIT1_REG is 
        port (clk,rst,w_enable : in std_logic;
            A1 : in std_logic_vector(5 downto 0);
            D1 : in std_logic;
            output : out std_logic_vector(63 downto 0));
    end component;
	begin 
		V2_1: BIT1_REG port map (clk, rst, w_enable, A1, D1, output);
end behav;

-----------------------IMM9-----------------------
library ieee;
use ieee.std_logic_1164.all;
entity IMM9 is
    port (clk,rst,w_enable : in std_logic;
    A1 : in std_logic_vector(5 downto 0);
    D1 : in std_logic_vector(2 downto 0);
    A2 : in std_logic_vector(5 downto 0);
    D2 : in std_logic_vector(2 downto 0);         
    A_in : in std_logic_vector(5 downto 0);
    D_out : out std_logic_vector(2 downto 0));
end entity IMM9;

architecture behav of IMM9 is
	type memory_array_16 is array (0 to 63) of std_logic_vector(15 downto 0);
	signal mem : memory_array := (others => (others => '0'));
	begin 
        process(clk,rst,A1,A2,D1,D2,A_in)
		begin 
			if(rst = '1') then 
				mem(0 to 63) <= (others => (others => '0'));
			else then 
				if(w_enable = '1') then 
					mem(to_integer(unsigned(A1))) <= D1;
                    mem(to_integer(unsigned(A2))) <= D2;
				end if;
			end if;
		end process;
		D_out <= mem(to_integer(unsigned(A_in)));
end behav;


  
